#!/usr/bin/env python
#
# generated by wxGlade 0.9.1 on Thu Feb 21 22:41:09 2019
#

import wx
import os
from multiprocessing import Process, Pipe
import logging
import time
from datetime import datetime as dt
import sys
import io
#from BIOSUP import BIOSUP_MAIN as entry_BIOSUP
from BIOSUP_THR_CHK_STATUS import chq_status
from BIOSUP import main

from time import sleep

from BIOSUP_LOAD_CONFIG import loadConfig 

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class BIOSUP_CONFIG(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BIOSUP_CONFIG.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        self.BIOSUP_APP = main
        self.selectall = self.running = True
        self.allchiparr = []
        self.str_file_config = os.path.join(os.getcwd(), os.path.dirname(__file__),"CONFIGURATOR_CONFIG.ini")
        self.str_datapathvendor = os.path.join(os.getcwd(), os.path.dirname(__file__),"vendorInfo.txt")

        self.TEXT_CTRL_STATUS = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_LEFT | wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP|wx.TE_RICH)
        self.TEXT_CTRL_STATUS.AppendText("Loading "+str(self.str_file_config)+"...\n")
        
        try:
            self.config = loadConfig(self.str_file_config, self.str_datapathvendor)
            self.TEXT_CTRL_STATUS.AppendText(str(self.str_file_config)+" successfully loaded...\n")
        except Exception as e:
            print("failed to load config: "+str(e))
            self.TEXT_CTRL_STATUS.AppendText(str(self.str_file_config)+" failed to load...\n")
            self.TEXT_CTRL_STATUS.SetForegroundColour(wx.RED)
        
        self.AMD_SIZER_ALL_CB = wx.CheckBox(self, wx.ID_ANY, "Select All")
        self.AMD_Chq_List = wx.CheckListBox(self, wx.ID_ANY, choices=self.config.AMDallowedchipsets)
        self.INTEL_SIZER_ALL_CB = wx.CheckBox(self, wx.ID_ANY, "Select All")
        self.Intel_Chq_List = wx.CheckListBox(self, wx.ID_ANY, choices=self.config.INTELallowedchipsets)
        self.VENDOR_SIZER_ALL_CB = wx.CheckBox(self, wx.ID_ANY, "Select All")
        self.Vendor_Chq_List = wx.CheckListBox(self, wx.ID_ANY, choices=self.config.vendor)
        self.CLEANUP_CB = wx.CheckBox(self, wx.ID_ANY, "Remove Zips")
        self.SH_BROWSER_CB = wx.CheckBox(self, wx.ID_ANY, "Show Browser")
        self.useLast_ChqBox = wx.CheckBox(self, wx.ID_ANY, "Last Config")
        self.Selectall_Btn = wx.Button(self, wx.ID_ANY, "Select\n All")
        #self.Run_Btn = wx.Button(self, wx.ID_ANY, "Generate\nConfig")
        self.Run_Btn = wx.Button(self, wx.ID_ANY, "Generate\n and Run")
        self.Run_n_Gen_Btn = wx.Button(self, wx.ID_ANY, "Generate\n Config")
        
        self.CLEANUP_CB.IsChecked()

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        #Bind events
        self.Run_Btn.Bind(wx.EVT_BUTTON, self.Run_Event)
        self.Run_n_Gen_Btn.Bind(wx.EVT_BUTTON, self.Run_Gen_Event)
        self.Selectall_Btn.Bind(wx.EVT_BUTTON, self.Select_All_Chq_Box)
        self.useLast_ChqBox.Bind(wx.EVT_CHECKBOX, self.Select_Last_Run)
        self.AMD_SIZER_ALL_CB.Bind(wx.EVT_CHECKBOX, self.singular_Chq_AMD)
        self.INTEL_SIZER_ALL_CB.Bind(wx.EVT_CHECKBOX, self.singular_Chq_INTEL)
        self.VENDOR_SIZER_ALL_CB.Bind(wx.EVT_CHECKBOX, self.singular_Chq_Vendor)
        self.Bind(wx.EVT_CLOSE, self.OnClose)


        #self.useLast_ChqBox.SetValue(True)
    
    def singular_Chq_AMD(self, evt):
        if self.AMD_SIZER_ALL_CB.IsChecked():
            self.AMD_Chq_List.SetCheckedStrings(self.config.AMDallowedchipsets)
        else:
            self.deselect_Check_Lists(self.AMD_Chq_List)
    def singular_Chq_INTEL(self, evt):
        if self.INTEL_SIZER_ALL_CB.IsChecked():
            self.Intel_Chq_List.SetCheckedStrings(self.config.INTELallowedchipsets)
        else:
            self.deselect_Check_Lists(self.Intel_Chq_List)
    def singular_Chq_Vendor(self, evt):
        if self.VENDOR_SIZER_ALL_CB.IsChecked():
            self.Vendor_Chq_List.SetCheckedStrings(self.config.vendor)
        else:
            self.deselect_Check_Lists(self.Vendor_Chq_List)
    
    def OnClose(self, evt):
        try:
            if self.biosup_process.is_alive():
                self.TEXT_CTRL_STATUS.AppendText("Exiting...\n")
                self.biosup_process.terminate()
            else:
                self.TEXT_CTRL_STATUS.AppendText("BIOSUP subscript already killed\n")
        except:
            self.TEXT_CTRL_STATUS.AppendText("No Process to kill\n")
        quit()
        wx.Exit()


    def Run_Gen_Event(self, evt):
        self.Gen_Config()
        self.TEXT_CTRL_STATUS.AppendText("Now Close this GUI, and run 'BIOSUP.exe'")
        self.TEXT_CTRL_STATUS.SetForegroundColour(wx.GREEN)
               

    def Run_Event(self, evt):
        self.Gen_Config()
        parent_conn, child_conn = Pipe()
        self.biosup_process = Process(target=self.BIOSUP_APP)
        self.biosup_process.daemon = True
        self.biosup_process.start()

        #self.TEXT_CTRL_STATUS.AppendText(thread.)


    def True_False_checker(self, Bool_State):
        if Bool_State:
            return "t"
        else:
            return ""

    def Gen_Config(self):
            #print("Attempting to run BIOSUP...")
        self.datapath = os.path.join(os.getcwd(), os.path.dirname(__file__),"config.ini")
        if self.Chq_fields():
            #Build the configuration for Biosup core
            with open (self.datapath,"w") as outfile:
                self.TEXT_CTRL_STATUS.AppendText("Writing config file...\n")
                
                outfile.write("[SETTINGS]\nclean = "+self.True_False_checker(self.CLEANUP_CB.IsChecked()))
                self.TEXT_CTRL_STATUS.AppendText("clean = "+self.True_False_checker(self.CLEANUP_CB.IsChecked())+"\n")
                
                outfile.write("\nopenBrowser = "+self.True_False_checker(self.SH_BROWSER_CB.IsChecked()))
                self.TEXT_CTRL_STATUS.AppendText("openBrowser = "+self.True_False_checker(self.SH_BROWSER_CB.IsChecked())+"\n")
                
                outfile.write("\nsaveState = t")
                self.TEXT_CTRL_STATUS.AppendText("saveState = t\n")
                
                outfile.write("\nsleeptimer = 6\nsleepwait = 5")
                
                outfile.write("\nallowedChipsetsAMD = "+str(",".join(self.AMD_Chq_List.GetCheckedStrings())))
                self.TEXT_CTRL_STATUS.AppendText("Allowed AMD chipsets = "+str(", ".join(self.AMD_Chq_List.GetCheckedStrings()))+"\n")
                
                outfile.write("\nallowedChipsetsIntel = "+str(",".join(self.Intel_Chq_List.GetCheckedStrings())))
                self.TEXT_CTRL_STATUS.AppendText("Allowed INTEL chipsets = "+str(", ".join(self.Intel_Chq_List.GetCheckedStrings()))+"\n")
                outfile.write("\nallowedChipsets = "+str(",".join(self.allchiparr)))
                outfile.write("\nallowedChipsetsAddon = [CIM]?")
                outfile.write("\nvendor = "+str(",".join(self.Vendor_Chq_List.GetCheckedStrings())))
                self.TEXT_CTRL_STATUS.AppendText("Allowed Vendors = "+str(",".join(self.Vendor_Chq_List.GetCheckedStrings()))+"\n")
                #self.STATUS_TEXT_CTRL.AppendText("Done...\n")
            self.TEXT_CTRL_STATUS.AppendText("Config Generated...\n")
            #self.Create_Thread()
        elif self.useLast_ChqBox.IsChecked():
            self.TEXT_CTRL_STATUS.AppendText("Overwriting old config...\n")
            #self.Create_Thread()
        else:
            self.TEXT_CTRL_STATUS.AppendText("Select at least 1 chipset and vendor or tick 'Run last config' \n")
        #os.system(r"C:\Documents and Settings\flow_model\flow.exe")



    def Chq_fields(self):
        self.allchiparr = self.AMD_Chq_List.GetCheckedStrings() + self.Intel_Chq_List.GetCheckedStrings()
        self.allarr = self.allchiparr + self.Vendor_Chq_List.GetCheckedStrings()
        
        if not len(self.allarr) == 0:    
            return True
        else:
            return False

    def Select_All_Chq_Box(self, evt): 
        if self.selectall:
            self.TEXT_CTRL_STATUS.AppendText("Selected all tick boxes\n")
            self.Set_Check_Lists(self.config)
            self.useLast_ChqBox.SetValue(False)
            self.selectall = False
            self.Selectall_Btn.SetLabel("De-select\n All")
            self.AMD_SIZER_ALL_CB.SetValue(True)
            self.INTEL_SIZER_ALL_CB.SetValue(True)
            self.VENDOR_SIZER_ALL_CB.SetValue(True)
        else:
            self.TEXT_CTRL_STATUS.AppendText("Unselecting all tick boxes\n")
            self.useLast_ChqBox.SetValue(False)
            self.deselect_Check_Lists(self.AMD_Chq_List)
            self.deselect_Check_Lists(self.Intel_Chq_List)
            self.deselect_Check_Lists(self.Vendor_Chq_List)
            self.selectall = True
            self.Selectall_Btn.SetLabel("Select\n All")
            self.AMD_SIZER_ALL_CB.SetValue(False)
            self.INTEL_SIZER_ALL_CB.SetValue(False)
            self.VENDOR_SIZER_ALL_CB.SetValue(False)

    def deselect_Check_Lists(self, mylist):
        for cb in mylist.GetCheckedItems():
                mylist.Check(cb, False)

    def Set_Check_Lists(self, config):
        self.AMD_Chq_List.SetCheckedStrings(config.AMDallowedchipsets)
        self.Intel_Chq_List.SetCheckedStrings(config.INTELallowedchipsets)
        self.Vendor_Chq_List.SetCheckedStrings(config.vendor)

    def Select_Last_Run(self, evt):
        if self.useLast_ChqBox.IsChecked():
            self.TEXT_CTRL_STATUS.AppendText("Loading last run\n")
            self.deselect_Check_Lists(self.AMD_Chq_List)
            self.deselect_Check_Lists(self.Intel_Chq_List)
            self.deselect_Check_Lists(self.Vendor_Chq_List)
            self.lastconfig = loadConfig(os.path.join(os.getcwd(), os.path.dirname(__file__),"config.ini"), self.str_datapathvendor)
            self.Set_Check_Lists(self.lastconfig)
            self.CLEANUP_CB.SetValue(bool(self.lastconfig.saveState))
        else:
            self.TEXT_CTRL_STATUS.AppendText("Unchecked 'Last Run'\n")


    def __set_properties(self):
        # begin wxGlade: BIOSUP_CONFIG.__set_properties
        self.SetTitle("BIOSUP")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap(os.path.join(os.getcwd(),'ICO_BIOSUP.ico'), wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.TEXT_CTRL_STATUS.SetMinSize((175, 250))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BIOSUP_CONFIG.__do_layout
        ALL_CTRLR = wx.BoxSizer(wx.VERTICAL)
        FAT_CONTROLLER_GRID_SIZER = wx.FlexGridSizer(5, 3, 0, 0)

        VENDOR_Sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Vendor"), wx.VERTICAL)
        INTEL_Sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "INTEL"), wx.VERTICAL)
        AMD_Sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "AMD"), wx.VERTICAL)
        
        AMD_Sizer.Add(self.AMD_SIZER_ALL_CB, 0, 0, 0)
        AMD_Sizer.Add(self.AMD_Chq_List, 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(AMD_Sizer, 1, wx.EXPAND, 0)
        INTEL_Sizer.Add(self.INTEL_SIZER_ALL_CB, 0, 0, 0)
        INTEL_Sizer.Add(self.Intel_Chq_List, 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(INTEL_Sizer, 1, wx.EXPAND, 0)
        VENDOR_Sizer.Add(self.VENDOR_SIZER_ALL_CB, 0, 0, 0)
        VENDOR_Sizer.Add(self.Vendor_Chq_List, 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(VENDOR_Sizer, 1, wx.EXPAND, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(self.useLast_ChqBox, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(self.CLEANUP_CB, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(self.SH_BROWSER_CB, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        FAT_CONTROLLER_GRID_SIZER.Add((0, 0), 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add((0, 0), 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add((0, 0), 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add((0, 0), 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add((0, 0), 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add((0, 0), 0, 0, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(self.Selectall_Btn, 0, wx.ALIGN_LEFT, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(self.Run_n_Gen_Btn, 0, wx.ALIGN_CENTER, 0)
        FAT_CONTROLLER_GRID_SIZER.Add(self.Run_Btn, 0, wx.ALIGN_RIGHT, 0)

        ALL_CTRLR.Add(FAT_CONTROLLER_GRID_SIZER, 0, 0, 0)
        ALL_CTRLR.Add(self.TEXT_CTRL_STATUS, 0, wx.EXPAND, 0)
        self.SetSizer(ALL_CTRLR)
        ALL_CTRLR.Fit(self)
        self.Layout()
        # end wxGlade


# end of class BIOSUP_CONFIG

class MyApp(wx.App):
    def OnInit(self):
        self.BIO_FRAME = BIOSUP_CONFIG(None, wx.ID_ANY, "")
        self.SetTopWindow(self.BIO_FRAME)
        self.BIO_FRAME.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    BIOSUP = MyApp(0)
    BIOSUP.MainLoop()
    
